<?php
/**
 * Created by PhpStorm.
 * User: steevenz
 * Date: 03-Aug-16
 * Time: 8:06 PM
 */

namespace O2System\Core\Environment\Interfaces;

/**
 * Severity
 *
 * @see     http://php.net/manual/en/errorfunc.constants.php
 *
 * @package o2system\vendor\o2system\o2core\src\Exception
 */
interface Severity
{
	/**
	 * E_ERROR
	 *
	 * Fatal run-time errors. These indicate errors that can not be recovered from,
	 * such as a memory allocation problem. Execution of the script is halted.
	 *
	 * @var int
	 */
	const E_ERROR = 1;

	// ------------------------------------------------------------------------

	/**
	 * E_WARNING
	 *
	 * Run-time warnings (non-fatal errors). Execution of the script is not halted
	 *
	 * @var int
	 */
	const E_WARNING = 2;

	// ------------------------------------------------------------------------

	/**
	 * E_PARSE
	 *
	 * Compile-time parse errors. Parse errors should only be generated by the parser.
	 *
	 * @var int
	 */
	const E_PARSE = 4;

	// ------------------------------------------------------------------------

	/**
	 * E_NOTICE
	 *
	 * Run-time notices. Indicate that the script encountered
	 * something that could indicate an error, but could also
	 * happen in the normal course of running a script.
	 *
	 * @var int
	 */
	const E_NOTICE = 8;

	// ------------------------------------------------------------------------

	/**
	 * E_CORE_ERROR
	 *
	 * Fatal errors that occur during PHP's initial startup.
	 * This is like an E_ERROR, except it is generated by the core of PHP.
	 *
	 * @var int
	 */
	const E_CORE_ERROR = 16;

	// ------------------------------------------------------------------------

	/**
	 * E_CORE_WARNING
	 *
	 * Warnings (non-fatal errors) that occur during PHP's initial startup.
	 * This is like an E_WARNING, except it is generated by the core of PHP.
	 *
	 * @var int
	 */
	const E_CORE_WARNING = 32;

	// ------------------------------------------------------------------------

	/**
	 * E_COMPILE_ERROR
	 *
	 * Fatal compile-time errors. This is like an E_ERROR,
	 * except it is generated by the Zend Scripting Engine.
	 *
	 * @var int
	 */
	const E_COMPILE_ERROR = 64;

	// ------------------------------------------------------------------------

	/**
	 * E_COMPILE_WARNING
	 *
	 * Compile-time warnings (non-fatal errors).
	 * This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
	 *
	 * @var int
	 */
	const E_COMPILE_WARNING = 128;

	// ------------------------------------------------------------------------

	/**
	 * E_USER_ERROR
	 *
	 * User-generated error message. This is like an E_ERROR,
	 * except it is generated in PHP code by using the PHP function trigger_error()
	 *
	 * @see http://php.net/manual/en/function.trigger-error.php
	 *
	 * @var int
	 */
	const E_USER_ERROR = 256;

	// ------------------------------------------------------------------------

	/**
	 * E_USER_WARNING
	 *
	 * User-generated warning message. This is like an E_WARNING,
	 * except it is generated in PHP code by using the PHP function trigger_error()
	 *
	 * @see http://php.net/manual/en/function.trigger-error.php
	 *
	 * @var int
	 */
	const E_USER_WARNING = 512;

	// ------------------------------------------------------------------------

	/**
	 * E_USER_NOTICE
	 *
	 * User-generated notice message. This is like an E_NOTICE,
	 * except it is generated in PHP code by using the PHP function trigger_error().
	 *
	 * @see http://php.net/manual/en/function.trigger-error.php
	 *
	 * @var int
	 */
	const E_USER_NOTICE = 1024;

	// ------------------------------------------------------------------------

	/**
	 * E_STRICT
	 *
	 * Enable to have PHP suggest changes to your code which will ensure the best interoperability
	 * and forward compatibility of your code.
	 *
	 * @note Since PHP 5 but not included in E_ALL until PHP 5.4.0
	 *
	 * @var int
	 */
	const E_STRICT = 2048;

	// ------------------------------------------------------------------------

	/**
	 * E_RECOVERABLE_ERROR
	 *
	 * Catchable fatal error. It indicates that a probably dangerous error occurred,
	 * but did not leave the Engine in an unstable state.
	 * If the error is not caught by a user defined handle (see also set_error_handler()),
	 * the application aborts as it was an E_ERROR.
	 *
	 * @see  http://php.net/manual/en/function.set-error-handler.php
	 * @note Since PHP 5.2.0
	 * @var int
	 */
	const E_RECOVERABLE_ERROR = 4096;

	// ------------------------------------------------------------------------

	/**
	 * E_DEPRECATED
	 *
	 * Run-time notices. Enable this to receive warnings about code that will not work in future versions.
	 *
	 * @note Since PHP 5.3.0
	 *
	 * @var int
	 */
	const E_DEPRECATED = 8192;

	// ------------------------------------------------------------------------

	/**
	 * E_USER_DEPRECATED
	 *
	 *User-generated warning message. This is like an E_DEPRECATED,
	 * except it is generated in PHP code by using the PHP function trigger_error().
	 *
	 * @see  http://php.net/manual/en/function.trigger-error.php
	 * @note Since PHP 5.3.0
	 *
	 * @var int
	 */
	const E_USER_DEPRECATED = 16384;

	// ------------------------------------------------------------------------

	/**
	 * E_ALL
	 *
	 * All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.
	 *
	 * @note 32767 in PHP 5.4.x, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously
	 *
	 * @var int
	 */
	const E_ALL = 32767;

	// ------------------------------------------------------------------------
}